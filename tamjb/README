$Id$

Track Attribute Manager - Jukebox


* Running (Part 1)

  If you have a binary package, see "Running (Part 2)" farther down.

  To download the source code for this package, go to

    http://tamjb.sourceforge.net/

  And await instructions.


* Compiling

 Initial project development is being done on a Gentoo 1.4 system with
 linux kernel 2.6.x. The server should run on any unix-based platform 
 (because of the temporary ESound requirement, see below). The Gtk# 
 GUI runs on any mono platform.

 Very soon(?), mono will natively support lots of cool streaming interfaces
 in a cross-platform manner using GStreamer. Until then, we can decode the 
 mp3 streams in managed code, using up most of the resources of a Pentium-III.
 While gradually using more and more RAM. OK, so it's not perfect, but it 
 works great!

 To build from source, you will need these tools:


 - GPL 

   This package has been developed under the GPL version 2, and should
   run fine with any higher version. Download a copy from www.gnu.org,
   or use the copy included with the package (see "COPYING").


 - C# compiler, runtime

   Known good configuration:

     Gentoo: mono-1.0

   Should compile and/or run fine with Microsoft(TM)'s runtime, except 
   for the esd dependency. With the Gtk# binaries, the gui frontend will
   run with a mono backend on a remote server.


 - Gtk, gtk-sharp

   gtk-sharp is required to compile the Gtk frontend program. Unless 
   you're planning to write a frontend using some other GUI (which should 
   be VERY easy), you need this

   Known good configuration:

     Gentoo: gtk-sharp-1.0

   Once again, the code and binaries


 - SQLite

   C# support for sqlite is built into mono at this point. You will need
   an actual sqlite binary though. The calls have been wrapped so
   you don't need to worry about building with thread-safe support. 

   Known good configuration:

     Gentoo: sqlite-2.8.11

   If you want to edit the database constructor or add multi-database 
   support, any database provider should work.


 - esound, Esd#

   As there seem to be no stable audio api's for C# under Linux
   at the moment, I am using the fine esd-sharp wrapper from:
   
     http://amy.udd.htu.se/~malte/mono/esd/

   Known good: esd-sharp-0.1.3

   No license is supplied. I expect this to eventually be replaced
   with GStreamer (Gst#), but it does work quite nicely.


 - Mp3Sharp (What, MORE third-party managed code?)

   Available here:

     http://www.mle.ie/~rob/mp3sharp/

   The supplied DLL seems to work, but for some reason the code sometimes
   goes into an infinite loop looking for sync at end-of-file. To fix this
   problem and add some debugging messages, apply this patch:

     patches/mp3sharp-rev.9mar04-eof_endless_loop.patch

   This code is GPL'ed. Which is good.

   The source download includes an Mp3Sharp.dll binary which works fine,
   aside from the infinite loop problem.

   You can also download my patched Mp3Sharp.dll binary, and compile the
   rest of the code yourself.
   

* Running (Part 2)

 Environment
  Put the required assemblies in your MONO_PATH, or install them into the 
  Global Assembly Cache.

  Linux:
    use gacutil -i to install each assembly, or set MONO_PATH.

  Windows:
    drag the dll's to the %WINDOWSDIR%/Assembly dir, and they will
    be automatically installed (this is really cool, btw). Or simply
    make sure they are in the "current directory".
    
    %WINDOWSDIR% is probably C:\windows.

 Create the Database:
  You will need to create the audio file database. Use tam.Server.exe's
  --create option to do this. The command line is something like
    
    tam.Server.exe --dbUrl=file:/home/myname/audiofiles.db --create

 Start the Server:
  Launch tam.Server.exe with appropriate options.

  It will start scanning for files and playing audio right
  away. Look at the output (or log file) to see if anything went wrong
  starting esd. If you are running it from init.d, you may need to 
  enable esound first.


 Client:
  Run tam.GtkPlayer.exe. It will connect to the server, which is by
  default localhost:5432, because this is what I typed in while prototyping. 
  This appears to also be the default MySQL port, which could be bad! Go
  to the config dialog, and set the host and port to wherever you are running
  the jukebox server.


* BUGS

 See todo.txt for a list of bugs, etc.
