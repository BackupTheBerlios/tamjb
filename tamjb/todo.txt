
TODO
 - Build against mono/gtk-sharp/glade-sharp 1.1.5

 - Drop songs from future part of playlist if they are flagged as suck or
  something. Perhaps rework the way songs are chosen to be more visually
  interesting?

 - Port to firebird database, because it is an embedded database
   that supports transactions and named parameters (unlike sqlite).
   The performance will probably be better with postgres if you
   have a server that gets millions of hits, but then probably not.
   Anyway, there is only one client of a given database instance,
   the engine. 

 - Add track browser dialogs, so that you can adjust song suck on blocks
  of songs, perhaps selecting by artist, etc.

 - Test database for existance. Ask/create if does not exist.

 - Make client mode a command-line option, or else create separate 
  client/server standalone binaries at build time. I'd like to see
  the Makefile create both versions every time you build, so you'll 
  know if you've broken something in one of the builds.

 - Enhanced error reporting. The new file recursive scanner has no way 
  to report files with problems. On my system, I commonly see

   - Files with no id3v2 info
   - Files with unparseable id3 fields that cause exceptions
   - Files with funny characters in the info, that cause postgres to
     throw an exception. (It shouldn't do this--I would expect the
     Parameter data types to automatically escape parameters. Perhaps
     they don't? Investigate.)

  Needs some sort of system to collect scan errors for optional viewing,
  because you don't want to crash or give up just because some mp3 file
  is corrupt!

 - Compressor presets

  The damn thing is very technical. This is good, if you're me, but probably
  bad if you're not. :) Must add presets so I can share my favorite settings
  with the two other people in the world that use this program.

 - Fix memory leak

  Much of the memory bloat and leakage seems to have gone away with
  a build against mono 1.1.4. Perhaps it isn't the tamjb code after
  all. Supposedly 1.1.5 fixes the "growing heap" problem...

 - Move all engine state into the database, and convert remoting 
  interfaces to use one-shot objects. Should improve scalability, and
  more importantly should make it easier to make a web front end.

 - Make a web front end, so the server can sit entirely in an apache
  instance and be accessed remotely.

 - Make a System.Windows.Forms GUI, or figure how to deploy the Gtk# 
  runtimes without recompiling. I do NOT want to have to compile
  separate binaries for windows, that is not acceptable.

 - Implement delete/copy of user/mood

 - Display the mp3 bitrate 

 - Add some sort of graphic display of compression ratios and levels.
  This really won't help you accomplish anything, but for some reason
  visual feedback is important. One of those psychology things, I guess.

 - Add support for monophonic mp3 files. (Proper support, that is. They
  play fine as long as you don't mind that they only play through the
  left channel right now.)

 - Add proper support for playing back files encoded at rates other
  than 44.1.

 - Add support for ogg/vorbis, WAV, and losslessly-compressed files

 - Calculate average song volume and store for later level adjustment

 - Create ebuilds for esd-sharp and mp3sharp, eliminating the need for 
  wrapper makefiles, etc. (gentoo)

 - Front-panel checkbox to tag damaged mp3's. This way, you don't have
  to say they suck, and later you can rewrip them. Needs a way to list
  (and printout list?) the broken mp3's.

 - When mp3's are not found, they should be flagged as missing and no
  longer played. Then later when the file scanner finds the file again,
  it can reinstate the file with its current settings still intact.
  Probably needs a "purge" function, too.

 - If a file does not have a ID3v2 tag, it will not be played. This is
  NOT a bug. But, there should be a flag in the database so that when an 
  untagged file is found, it will be added with a provisional tag 
  (truncated filename?) and rescanned periodically.

 - Consider how to share suck info over the internet with other 
  players. I'd like to have a serverless P2P setup for sharing
  recommendations. Perhaps an abstract info sharing layer could be
  designed so that it could be layerd on a client-server system
  OR gnutalla-2 OR freenet/entropy or whatever you can find.


DONE
  Added a predelay option to the compressor to make the attacks a bit less
  "pop" prone on faster attack settings. Works OK.

 - Tue Dec  7 18:07:55 PST 2004

  Save the current logged in user in the database (should remember who was
  the last user. Really.

  Allow the program to run standalone, not as a client server program, 
  for the simple case where one person is listening.

  A branch of Mp3Sharp is now located (temporarily) in the tamjb cvs
  repository.

  Mono files no longer play back at double speed, but now they play back
  only in the left channel. I _guess_ this is an improvement!

  Memory leakage greatly reduced.

  Changed the default suck/mood values back to 20%/80%

  Add user controls for the compression and limiting. Settings are stored
  in the database so you don't have to reset them on every reboot.

  Cut CPU usage by more than half, by rewriting Mp3Sharp's buffering.

 - Sat Jul 17 15:39:12 EDT 2004

  Added suck/mood percent display in track list.

  You can now modify the attributes of a song that is not playing by
  selecting it in the list

  New, improved controls layout.

  Compression and soft limiting to even out that listening experience.
  (May not be suitable for music with long, quiet passages: ie 
  classical. Your mileage may vary.)

  PostgreSQL support. SQLite seems to lock the filesystem or something,
  causing dropouts. Postgres seems better about this.

  Added per-user and per-mood song attributes. (Log in: how do you feel?)

  Interface / database redesign to accomodate users and moods instead
  of track attributes.

 - Thu Jul  8 17:55:50 EDT 2004
 
  Added Unsynchronization support to the id3 tag reader

  Added strong-signing for all assemblies, including third-party assemblies

  Rearranged the project

  Added id3 tag reader, removed dependency on unknown-license id3 tag reader

 - Wed Jul  7 19:29:49 EDT 2004

 - snapshot-2004-05-14

  Updated the patch for mp3sharp to fix that infinite loop problem.

  Reversed the name so the year comes first. This makes more sense, right?

 - snapshot-12-05-2004

  Initial release.
