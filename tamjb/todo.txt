
TODO
 - Make the server use CLR system service api's, which should allow it
  to run as a service cross-platform (works as of mono 1.1.7). Need to
  store settings in the config file and/or database, though.

 - Add gratuitous eye candy
   - Display the mp3 bitrate 
   - Add some sort of graphic display of compression ratios and levels.
    This really won't help you accomplish anything, but for some reason
    visual feedback is important. One of those psychology things, I guess.

 - Drop songs from future part of playlist if they are flagged as suck or
  something. Perhaps rework the way songs are chosen to be more visually
  interesting?

 - Port to firebird database, because it is an embedded database
   that supports transactions and named parameters (unlike sqlite).
   Must investigate the use of firebird as a standalone engine on
   linux, as it doesn't seem to properly support that.

   Or, if named parameter support is ever properly added to the 
   SQLite CLR wrapper, possibly use that, since embedded firebird
   is not really widely used on linux.

 - Add track browser dialogs, so that you can adjust song suck on blocks
  of songs, perhaps selecting by artist, etc.

 - Front-panel checkbox to tag damaged mp3's. This way, you don't have
  to say they suck, and later you can rewrip them. Needs a way to list
  (and printout list?) the broken mp3's.

 - Display audio player status on error. Right now, if the mp3player
  thread can't start, nothing happens!

 - Test database for existance. Ask/create if does not exist.

 - Enhanced error reporting. The new file recursive scanner has no way 
  to report files with problems. On my system, I commonly see

   - Files with no id3v2 info
   - Files with unparseable id3 fields that cause exceptions
   - Files with funny characters in the info, that cause postgres to
     throw an exception. (It shouldn't do this--I would expect the
     Parameter data types to automatically escape parameters. Perhaps
     they don't? Investigate.)

  Needs some sort of system to collect scan errors for optional viewing,
  because you don't want to crash or give up just because some mp3 file
  is corrupt!

 - Compressor presets

  The damn thing is very technical. This is good, if you're me, but probably
  bad if you're not. :) Must add presets so I can share my favorite settings
  with the two other people in the world that use this program.

 - Move all engine state into the database, and convert remoting 
  interfaces to use one-shot objects. Should improve scalability, and
  more importantly should make it easier to make a web front end.

 - Make a web front end, so the server can sit entirely in an apache
  instance and be accessed remotely.

 - Make a System.Windows.Forms GUI, or figure how to deploy the Gtk# 
  runtimes without recompiling. I do NOT want to have to compile
  separate binaries for windows, that is not acceptable, however it
  should be possible to distribute both the gtk and forms GUI's with
  the same engine DLL's. 

 - Implement delete/copy of user/mood

 - Add support for monophonic mp3 files. (Proper support, that is. They
  play fine as long as you don't mind that they only play through the
  left channel right now.)

 - Add proper support for playing back files encoded at rates other
  than 44.1.

 - Calculate average song volume and store for later level adjustment

 - Create ebuilds for esd-sharp and mp3sharp, eliminating the need for 
  wrapper makefiles, etc. (gentoo)

 - When mp3's are not found, they should be flagged as missing and no
  longer played. Then later when the file scanner finds the file again,
  it can reinstate the file with its current settings still intact.
  Probably needs a "purge" function, too.

 - If a file does not have a ID3v2 tag, it will not be played. This is
  NOT a bug. But, there should be a flag in the database so that when an 
  untagged file is found, it will be added with a provisional tag 
  (truncated filename?) and rescanned periodically.

 - Consider how to share suck info over the internet with other 
  players. I'd like to have a serverless P2P setup for sharing
  recommendations. Perhaps an abstract info sharing layer could be
  designed so that it could be layerd on a client-server system
  OR gnutalla-2 OR freenet/entropy or whatever you can find.

 - Add support for ogg/vorbis, WAV, and/or losslessly-compressed files.
  Probably GStreamer# will solve this problem transparently. If it is
  ever released.


