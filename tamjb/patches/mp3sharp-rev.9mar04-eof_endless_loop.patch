diff -r -N -b -U3 mp3sharp/mp3sharp/Makefile ../mp3sharp/mp3sharp/Makefile
--- mp3sharp/mp3sharp/Makefile	1969-12-31 19:00:00.000000000 -0500
+++ ../mp3sharp/mp3sharp/Makefile	2004-05-13 15:42:29.000000000 -0400
@@ -0,0 +1,57 @@
+# $Id$
+# A simple unix makefile for mp3sharp. Whee.
+
+# Should the engine throw an exception when it loses sync?
+#   -define:THROW_ON_SYNC_LOSS
+
+DEBUGFLAGS = -g -define:DEBUG -define:TRACE -define:THROW_ON_SYNC_LOSS
+
+# Note: LayerIIDecoder.cs won't compile with mcs 0.29.99
+
+SOURCES= Mp3Stream.cs\
+ converter/RiffFile.cs\
+ converter/WaveFile.cs\
+ converter/WaveFileObuffer.cs\
+ decoder/BackStream.cs\
+ decoder/BitReserve.cs\
+ decoder/Bitstream.cs\
+ decoder/BitstreamErrors.cs\
+ decoder/BitstreamException.cs\
+ decoder/Control.cs\
+ decoder/Crc16.cs\
+ decoder/Decoder.cs\
+ decoder/DecoderErrors.cs\
+ decoder/DecoderException.cs\
+ decoder/Equalizer.cs\
+ decoder/FrameDecoder.cs\
+ decoder/Header.cs\
+ decoder/huffcodetab.cs\
+ decoder/InputStreamSource.cs\
+ decoder/JavaLayerError.cs\
+ decoder/JavaLayerErrors.cs\
+ decoder/JavaLayerException.cs\
+ decoder/JavaLayerHook.cs\
+ decoder/JavaLayerUtils.cs\
+ decoder/LayerIDecoder.cs\
+ decoder/LayerIIDecoder.cs\
+ decoder/LayerIIIDecoder.cs\
+ decoder/Manager.cs\
+ decoder/Obuffer.cs\
+ decoder/OutputChannels.cs\
+ decoder/SampleBuffer.cs\
+ decoder/Source.cs\
+ decoder/SynthesisFilter.cs\
+ Support/AssemblyInfo.cs\
+ Support/SupportClass.cs
+
+REFERENCES = -r System \
+        -r System.Data \
+        -r System.Management
+
+TARGET = Mp3Sharp.dll
+
+all: $(TARGET)
+
+$(TARGET): $(SOURCES)
+	mcs $(DEBUGFLAGS) $(REFERENCES) -target:library -out:$@ $(SOURCES) 
+
Files mp3sharp/mp3sharp/Mp3Sharp.dll and ../mp3sharp/mp3sharp/Mp3Sharp.dll differ
diff -r -N -b -U3 mp3sharp/mp3sharp/Mp3Stream.cs ../mp3sharp/mp3sharp/Mp3Stream.cs
--- mp3sharp/mp3sharp/Mp3Stream.cs	2004-03-09 14:31:10.000000000 -0500
+++ ../mp3sharp/mp3sharp/Mp3Stream.cs	2004-05-13 15:58:19.000000000 -0400
@@ -179,7 +179,8 @@
 		/// </summary>
 		public override void Close()
 		{
-			SourceStream.Close();
+                        JZBitStream.close(); // This should close SourceStream as well.
+			// SourceStream.Close();
 		}
 
 		private QueueOBuffer QueueOBuffer;
diff -r -N -b -U3 mp3sharp/mp3sharp/decoder/Bitstream.cs ../mp3sharp/mp3sharp/decoder/Bitstream.cs
--- mp3sharp/mp3sharp/decoder/Bitstream.cs	2004-02-24 09:16:32.000000000 -0500
+++ ../mp3sharp/mp3sharp/decoder/Bitstream.cs	2004-05-14 12:48:20.027563016 -0400
@@ -32,6 +32,8 @@
 namespace javazoom.jl.decoder
 {
 	using System;
+        using System.Diagnostics;
+
 	/// <summary> The <code>Bistream</code> class is responsible for parsing
 	/// an MPEG audio bitstream.
 	/// *
@@ -248,6 +250,7 @@
 			{
 				
 				case 0: 
+                                        Trace.WriteLine( "0 bytes read == sync?", "Bitstream" );
 					sync = true;
 					break;
 				
@@ -306,6 +309,14 @@
 			
 			headerstring = ((syncbuf[0] << 16) & 0x00FF0000) | ((syncbuf[1] << 8) & 0x0000FF00) | ((syncbuf[2] << 0) & 0x000000FF);
 			
+
+#if THROW_ON_SYNC_LOSS
+                        // t/DD: If we don't resync in a reasonable amount of time, 
+                        //       throw an exception
+                        int bytesSkipped = 0;
+                        bool lostSyncYet = false;
+#endif
+
 			do 
 			{
 				headerstring <<= 8;
@@ -318,6 +329,32 @@
 				headerstring |= (syncbuf[3] & 0x000000FF);
 				
 				sync = isSyncMark(headerstring, syncmode, syncword);
+
+#if THROW_ON_SYNC_LOSS
+                                // Just for debugging -- if we lost sync, bitch
+                                if (!sync && !lostSyncYet)
+                                {
+                                   lostSyncYet = true;
+                                   Trace.WriteLine( "Lost Sync :(", "Bitstream" );
+                                }
+
+                                if (lostSyncYet && sync)
+                                {
+                                   Trace.WriteLine( "Found Sync", "Bitstream" );
+                                }
+
+
+                                // If we haven't resynced within a frame (or so) give up and
+                                // throw an exception. (Could try harder?)
+                                ++ bytesSkipped;
+                                if ((bytesSkipped % 2048) == 0) // A paranoia check -- is the code hanging in a loop here?
+                                {
+                                    Trace.WriteLine( "Sync still not found", "Bitstream" );
+                                    // throw newBitstreamException(javazoom.jl.decoder.BitstreamErrors_Fields.STREAM_ERROR, 
+                                    //                             null);
+                                }
+#endif
+
 			}
 			while (!sync);
 			
@@ -347,13 +384,13 @@
 			if (sync)
 			{
 				sync = (((SupportClass.URShift(headerstring, 10)) & 3) != 3);
-				if (!sync) 	Console.WriteLine("INVALID SAMPLE RATE DETECTED");
+				if (!sync) 	Trace.WriteLine("INVALID SAMPLE RATE DETECTED", "Bitstream");
 			}
 			// filter out invalid layer
 			if (sync)
 			{
 				sync = (((SupportClass.URShift(headerstring, 17)) & 3) != 0);
-				if (!sync) Console.WriteLine("INVALID LAYER DETECTED");
+				if (!sync) Trace.WriteLine("INVALID LAYER DETECTED", "Bitstream");
 			}
 			// filter out invalid version
 			if (sync)
@@ -484,8 +521,12 @@
 				while (len > 0)
 				{
 					int bytesread = source.Read(b, offs, len);
-					if (bytesread == - 1)
+					if (bytesread == - 1 
+                                            || bytesread == 0) // t/DD -- .NET returns 0 at end-of-stream!
 					{
+                                                // t/DD: this really SHOULD throw an exception here...
+                                                Trace.WriteLine( "readFully -- returning success at EOF? (" + bytesread + ")", 
+                                                                 "Bitstream" );
 						while (len-- > 0)
 						{
 							b[offs++] = 0;
